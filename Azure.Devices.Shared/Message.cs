using System;

namespace Microsoft.Azure.Devices.Client
{
    /// <summary>
    /// The data structure represent the message that is used for interacting with IotHub.
    /// </summary>
    public class Message:IDisposable
    {
        private readonly byte[] _byteMessage;

        /// <summary>
        /// Constructor which uses the input byte array as the body.
        /// </summary>
        /// <remarks>User should treat the input byte array as immutable when sending the message.</remarks>
        /// <param name="byteArray">A byte array which will be used to form the body stream.</param>
        public Message(byte[] byteArray)
        {
            _byteMessage = byteArray;
        }

        /// <summary>
        /// [Required for two way requests] Used to correlate two-way communication.
        /// Format: A case-sensitive string ( up to 128 char long) of ASCII 7-bit alphanumeric chars
        /// + {'-', ':', '/', '\', '.', '+', '%', '_', '#', '*', '?', '!', '(', ')', ',', '=', '@', ';', '$', '''}.
        /// Non-alphanumeric characters are from URN RFC.
        /// </summary>
        public string MessageId { get; set; }

        /// <summary>
        /// [Required] Destination of the message
        /// </summary>
        public string To { get; set; }

        /// <summary>
        /// [Optional] The time when this message is considered expired
        /// </summary>
        public DateTime ExpiryTimeUtc { get; set; }

        /// <summary>
        /// Used in message responses and feedback
        /// </summary>
        public string CorrelationId { get; set; }

        /// <summary>
        /// [Required] SequenceNumber of the received message
        /// </summary>
        public ulong SequenceNumber { get; set; }

        /// <summary>
        /// [Required] LockToken of the received message
        /// </summary>
        public string LockToken { get; set; }

        /// <summary>
        /// Date and time when the device-to-cloud message was received by the server.
        /// </summary>
        public DateTime EnqueuedTimeUtc { get; set; }

        /// <summary>
        /// Number of times the message has been previously delivered
        /// </summary>
        public uint DeliveryCount { get; set; }

        /// <summary>
        /// [Required in feedback messages] Used to specify the origin of messages generated by device hub.
        /// Possible value: “{hub name}/”
        /// </summary>
        public string UserId { get; set; }

        /// <summary>
        /// For outgoing messages, contains the Mqtt topic that the message is being sent to
        /// For incoming messages, contains the Mqtt topic that the message arrived on
        /// </summary>
        internal string MqttTopicName { get; set; }

        public void Dispose()
        {
           // TODO
        }

        /// <summary>
        /// This methods return the body stream as a byte array
        /// </summary>
        /// <returns></returns>
        /// <exception cref="ObjectDisposedException">throws if the event data has already been disposed.</exception>
        public byte[] GetBytes() => _byteMessage;        
    }
}